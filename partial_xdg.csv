"Application","Legacy Path","Supported Since","Discussion","Notes"

"Anki","~/Anki ~/Documents/Anki","","[83] [84]","$ anki -b ""$XDG_DATA_HOME""/Anki"
"coreutils","~/.dircolors","","","$ eval $(dircolors ""$XDG_CONFIG_HOME""/dircolors)"
"Go","~/go","[108]","","$ export GOPATH=""$XDG_DATA_HOME""/go"

"bazaar","~/.bazaar ~/.bzr.log","2.3.0","[87]","Discussion in upstream bug states that bazaar will use ~/.config/bazaar if it exists. The logfile ~/.bzr.log might still be written."
"buchhaltung-gitAUR","~/.buchhaltung","","[88]","$ export BUCHHALTUNG=""$XDG_CONFIG_HOME""/buchhaltung"
"Ruby#Bundler","~/.bundle","","[89] [90]","$ export BUNDLE_USER_CONFIG=""$XDG_CONFIG_HOME""/bundle BUNDLE_USER_CACHE=""$XDG_CACHE_HOME""/bundle BUNDLE_USER_PLUGIN=""$XDG_DATA_HOME""/bundle"
"ccache","~/.ccache","","","$ export CCACHE_CONFIGPATH=""$XDG_CONFIG_HOME""/ccache.config $ export CCACHE_DIR=""$XDG_CACHE_HOME""/ccache"
"chez-schemeAUR","~/.chezscheme_history","","","$ petite --eehistory ""$XDG_DATA_HOME""/chezscheme/history"
"Chromium","~/.chromium ~/.pki","23057","[95] [96] [97]",""
"clusterssh","~/.clusterssh/","","","$ alias cssh=""cssh --config-file '$XDG_CONFIG_HOME/clusterssh/config'"" $XDG_CONFIG_HOME/clusterssh/config extra_cluster_file=$HOME/.config/clusterssh/clusters extra_tag_file=$HOME/.config/clusterssh/tags Despite this, clusterssh will still create ~/.clusterssh/."
"dict","~/.dictrc","","","$ dict -c ""$XDG_CONFIG_HOME""/dict/dictrc"
"docker-machine","~/.docker/machine","","","$ export MACHINE_STORAGE_PATH=""$XDG_DATA_HOME""/docker-machine"
"DOSBox","~/.dosbox/dosbox-0.74-2.conf","","[100]","$ dosbox -conf ""$XDG_CONFIG_HOME""/dosbox/dosbox.conf"
"elixir","~/.mix","afaf889","[101] [102]","Elixir do not fully conform to XDG specs, it will use XDG only if the environment variables are present, otherwise it will by default use legacy path."
"emscripten","~/.emscripten ~/.emscripten_sanity ~/.emscripten_ports ~/.emscripten_cache__last_clear","","[103]","$ export EM_CONFIG=""$XDG_CONFIG_HOME""/emscripten/config $ export EM_CACHE=""$XDG_CACHE_HOME""/emscripten/cache $ export EM_PORTS=""$XDG_DATA_HOME""/emscripten/cache $ emcc --em-config ""$XDG_CONFIG_HOME""/emscripten/config --em-cache ""$XDG_CACHE_HOME""/emscripten/cache"
"freecadAUR","~/.FreeCAD","","[104]","$ freecad -u ""$XDG_CONFIG_HOME""/FreeCAD/user.cfg -s ""$XDG_CONFIG_HOME""/FreeCAD/system.cfg Despite these options, freecadAUR will still create the file .FreeCAD/cookie as the web module has it hard coded"
"get_iplayerAUR","~/.get_iplayer","","","$ export GETIPLAYERUSERPREFS=""$XDG_DATA_HOME""/get_iplayer"
"getmail","~/.getmail/getmailrc","","","$ getmail --rcfile=""$XDG_CONFIG_HOME/getmail/getmailrc"" --getmaildir=""$XDG_DATA_HOME/getmail"""
"glivAUR","~/.glivrc","","","$ gliv --glivrc=""$XDG_CONFIG_HOME""/gliv/glivrc"
"GNURadio","~/.gnuradio","","[105]",""
"GnuPG","~/.gnupg","","[106] [107]","$ export GNUPGHOME=""$XDG_DATA_HOME""/gnupg $ gpg2 --homedir ""$XDG_DATA_HOME""/gnupg Note that this currently does not work out-of-the-box using systemd user units and socket-based activation, since the socket directory changes based on the hash of $GNUPGHOME. You can get the new socket directory using gpgconf --dry-run --create-socketdir, and have to modify the systemd user units to listen on the correct sockets accordingly."
"Google Earth","~/.googleearth","","","Some paths can be changed with the KMLPath and CachePath options in ~/.config/Google/GoogleEarthPlus.conf"
"gopass","~/.password-store","","","Override settings in ~/.config/gopass/config.yml: ~/.config/gopass/config.yml root: path: gpgcli-gitcli-fs+file:///home/<userid>/.config/password-store"
"GQ LDAP client","~/.gq ~/.gq-state","1.51","","$ export GQRC=""$XDG_CONFIG_HOME""/gqrc $ export GQSTATE=""$XDG_DATA_HOME""/gq/gq-state $ mkdir -p ""$(dirname ""$GQSTATE"")"""
"ipython/jupyter","~/.ipython","","won't fix,won't fix","$ export IPYTHONDIR=""$XDG_CONFIG_HOME""/jupyter $ export JUPYTER_CONFIG_DIR=""$XDG_CONFIG_HOME""/jupyter"
"irb","~/.irbrc","","","~/.profile $ export IRBRC=""$XDG_CONFIG_HOME""/irb/irbrc ""$XDG_CONFIG_HOME""/irb/irbrc IRB.conf[:SAVE_HISTORY] ||= 1000 IRB.conf[:HISTORY_FILE] ||= File.join(ENV[""XDG_DATA_HOME""], ""irb"", ""history"")"
"irssi","~/.irssi","","[111]","$ irssi --config=""$XDG_CONFIG_HOME""/irssi/config --home=""$XDG_DATA_HOME""/irssi"
"Java#OpenJDK","~/.java/.userPrefs","","[112]","$ export _JAVA_OPTIONS=-Djava.util.prefs.userRoot=""$XDG_CONFIG_HOME""/java"
"ledger","~/.ledgerrc, ~/.pricedb","","[114]","$ ledger --init-file ""$XDG_CONFIG_HOME""/ledgerrc"
"libdvdcss","~/.dvdcss","","[115]","$ export DVDCSS_CACHE=""$XDG_DATA_HOME""/dvdcss"
"libice","~/.ICEauthority","","[116]","$ export ICEAUTHORITY=""$XDG_CACHE_HOME""/ICEauthority Make sure XDG_CACHE_HOME is set beforehand to directory user running Xorg has write access to. Do not use XDG_RUNTIME_DIR as it is available after login. Display managers that launch Xorg (like GDM) will repeatedly fail otherwise."
"maven","~/.m2","","[117]","$ mvn -gs ""$XDG_CONFIG_HOME""/maven/settings.xml and set <localRepository> as appropriate in settings.xml"
"MOC","~/.moc","","","$ mocp -M ""$XDG_CONFIG_HOME""/moc $ mocp -O MOCDir=""$XDG_CONFIG_HOME""/moc"
"Node.js","~/.node_repl_history","","","$ export NODE_REPL_HISTORY=""$XDG_DATA_HOME""/node_repl_history [119]"
"notmuch","~/.notmuch-config","","[120]","$ export NOTMUCH_CONFIG=""$XDG_CONFIG_HOME""/notmuch/notmuchrc $ export NMBGIT=""$XDG_DATA_HOME""/notmuch/nmbug"
"npm","~/.npm ~/.npmrc","","[121]","$ export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc npmrc prefix=${XDG_DATA_HOME}/npm cache=${XDG_CACHE_HOME}/npm tmp=${XDG_RUNTIME_DIR}/npm init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js  prefix is unnecessary (and unsupported) if Node.js is installed by nvmAUR."
"nuget","~/.nuget/packages","","[122]","$ export NUGET_PACKAGES=""$XDG_CACHE_HOME""/NuGetPackages"
"NVIDIA","~/.nv","","","Uses XDG_CACHE_HOME if set, otherwise improperly falls back to ~/.nv instead of ~/.cache."
"Octave","~/octave ~/.octave_packages ~/.octave_hist","","","$ export OCTAVE_HISTFILE=""$XDG_CACHE_HOME/octave-hsts"" $ export OCTAVE_SITE_INITFILE=""$XDG_CONFIG_HOME/octave/octaverc""  $XDG_CONFIG_HOME/octave/octaverc source /usr/share/octave/site/m/startup/octaverc; pkg prefix ~/.local/share/octave/packages ~/.local/share/octave/packages; pkg local_list /home/<your username>/.local/share/octave/octave_packages;  The local_list option must be given an absolute path."
"openscad","~/.OpenSCAD","7c3077b0f","[123]","Does not fully honour XDG Base Directory Specification, see [124] Currently it hard-codes ~/.local/share."
"OpenSSL","~/.rnd","","","Seeding file .rnd's location can be set with RANDFILE environment variable per FAQ."
"Pidgin","~/.purple","","[125]","$ pidgin --config=""$XDG_DATA_HOME""/purple"
"PostgreSQL","~/.psqlrc ~/.psql_history ~/.pgpass ~/.pg_service.conf","9.2","[126] [127]","$ export PSQLRC=""$XDG_CONFIG_HOME/pg/psqlrc"" $ export PSQL_HISTORY=""$XDG_CACHE_HOME/pg/psql_history"" $ export PGPASSFILE=""$XDG_CONFIG_HOME/pg/pgpass"" $ export PGSERVICEFILE=""$XDG_CONFIG_HOME/pg/pg_service.conf"" It is required to create both directories: $ mkdir ""$XDG_CONFIG_HOME/pg"" && mkdir ""$XDG_CACHE_HOME/pg"""
"PulseAudio","~/.esd_auth","","","Very likely generated by the module-esound-protocol-unix.so module.  It can be configured to use a different location but it makes much more sense to just comment out this module in /etc/pulse/default.pa or ""$XDG_CONFIG_HOME""/pulse/default.pa."
"python-azure-cliAUR","~/.azure","","","$ export AZURE_CONFIG_DIR=$XDG_DATA_HOME/azure"
"python-gripAUR","~/.grip","","","$ export GRIPHOME=""$XDG_CONFIG_HOME/grip"""
"racket","~/.racketrc ~/.racket","","[128]","$ export PLTUSERHOME=""$XDG_DATA_HOME""/racket"
"rlwrap","~/.*_history","","[129]","$ export RLWRAP_HOME=""$XDG_DATA_HOME""/rlwrap"
"Ruby#RubyGems","~/.gem","","","$ export GEM_HOME=""$XDG_DATA_HOME""/gem $ export GEM_SPEC_CACHE=""$XDG_CACHE_HOME""/gem Make sure to remove gem: --user-install from /etc/gemrc"
"sbt","~/.sbt ~/.ivy2","","[131]","$ sbt -ivy ""$XDG_DATA_HOME""/ivy2 -sbt-dir ""$XDG_DATA_HOME""/sbt (beware [132])"
"SageMath","~/.sage","","","$ export DOT_SAGE=""$XDG_CONFIG_HOME""/sage"
"spacemacs","~/.spacemacs ~/.spacemacs.d","[133]","[134]","Move the ~/.spacemacs file. $ export SPACEMACSDIR=""$XDG_CONFIG_HOME""/spacemacs $ mv ~/.spacemacs ""$SPACEMACSDIR""/init.el Other files need to be configured like Emacs."
"subversion","~/.subversion","","[136] [137][138]","$ svn --config-dir ""$XDG_CONFIG_HOME""/subversion"
"tiptopAUR","~/.tiptoprc","","","This will still expect the .tiptoprc file. $ tiptop -W ""$XDG_CONFIG_HOME""/tiptop"
"urxvtd","~/.urxvt/urxvtd-hostname","","","$ export RXVT_SOCKET=""$XDG_RUNTIME_DIR""/urxvtd"
"Vagrant","~/.vagrant.d ~/.vagrant.d/aliases","","[139]","$ export VAGRANT_HOME=""$XDG_DATA_HOME""/vagrant $ export VAGRANT_ALIAS_FILE=""$XDG_DATA_HOME""/vagrant/aliases"
"Visual Studio Code","~/.vscode-oss/argv.json","","[140]","You can use $ export VSCODE_PORTABLE=""$XDG_DATA_HOME""/vscode, which is not documented and might break unexpectedly"
"WakaTime","~/.wakatime.cfg ~/.wakatime.data ~/.wakatime.db ~/.wakatime.log","","","$ export WAKATIME_HOME=""$XDG_CONFIG_HOME/wakatime"" The directory needs to be created manually: $ mkdir ""$XDG_CONFIG_HOME/wakatime"""
"wget","~/.wgetrc ~/.wget-hsts","","","$ export WGETRC=""$XDG_CONFIG_HOME/wgetrc"" and add the following as an alias for wget: $ wget --hsts-file=""$XDG_CACHE_HOME/wget-hsts"" or set the hsts-file variable with an absolute path as wgetrc does not support environment variables: $ echo hsts-file \= ""$XDG_CACHE_HOME""/wget-hsts >> ""$XDG_CONFIG_HOME/wgetrc"""
"wine","~/.wine","","[143]","Winetricks uses XDG-alike location below for WINEPREFIX management: $ mkdir -p ""$XDG_DATA_HOME""/wineprefixes $ export WINEPREFIX=""$XDG_DATA_HOME""/wineprefixes/default"
"xbindkeys","~/.xbindkeysrc","","","$ xbindkeys -f ""$XDG_CONFIG_HOME""/xbindkeys/config"
"xorg-xauth","~/.Xauthority","","","$ export XAUTHORITY=""$XDG_RUNTIME_DIR""/Xauthority Note that LightDM does not allow you to change this variable. If you change it nonetheless, you will not be able to login. Use startx instead or configure LightDM. According to [144] SLiM has ~/.Xauthority hardcoded."
"xinit","~/.xinitrc ~/.xserverrc","","[145]","$ export XINITRC=""$XDG_CONFIG_HOME""/X11/xinitrc $ export XSERVERRC=""$XDG_CONFIG_HOME""/X11/xserverrc Note that these variables are respected by xinit, but not by startx. Instead, specify the filename as an argument: $ startx ""$XDG_CONFIG_HOME/X11/xinitrc"" -- ""$XDG_CONFIG_HOME/X11/xserverrc"" vt1"
"xorg-xrdb","~/.Xresources ~/.Xdefaults","","","Ultimately you should be using Xresources and since these resources are loaded via xrdb you can specify a path such as $ xrdb -load ~/.config/X11/xresources."
"yarn","~/.yarnrc ~/.yarn/ ~/.yarncache/ ~/.yarn-config/","2d454b5","[147] [148]","$ alias yarn=""yarn --use-yarnrc $XDG_CONFIG_HOME/yarn/config"""
